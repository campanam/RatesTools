/* RatesTools version 1.0.0
Michael G. Campana and Ellie E. Armstrong, 2020-2023
Smithsonian Institution and Stanford University

CC0: To the extent possible under law, the Smithsonian Institution and Stanford 
University have waived all copyright and related or neighboring rights to RatesTools;
this work is published from the United States. You should have received a copy of the
CC0 legal code along with this work. If not, see 
<http://creativecommons.org/publicdomain/zero/1.0/>.
 
We politely request that this work be cited as:
Armstrong, E.E. & M.G. Campana. 2023. RatesTools: a Nextflow pipeline for detecting
de novo germline mutations in pedigree sequence data. Bioinformatics. 39: btac784.
doi: 10.1093/bioinformatics/btac784. */

manifest {

	name = 'RatesTools'
	author = 'Michael G. Campana, Ellie E. Armstrong'
	homePage = 'https://github.com/campanam/RatesTools'
	description = 'Pipeline to calculate de novo mutation rates'
	mainScript = 'ratestools.nf'
	version = '1.0.0'
	nextflowVersion = '>=23.10.0'

}

params {

	refseq = "$launchDir/ref.fa" // Reference sequence
	reads = "$launchDir/*{R1,R2}_001.fastq*" // Read pairs
	bwa_alg = "" // algorithm for BWA index. Value "" permits BWA to infer algorithm
	markDuplicates = "picard" // Choice of "picard", "samtools" or "sambamba" for markDuplicates
	picard_conda = false // Install Picard via Nextflow Conda handling
	picard = "$launchDir/picard.jar" // Path for Picard jar file. Ignore if using Conda-installed Picard.
	picard_java = "" // Java options for Picard
	gatk_conda = false // Install GATK via Nextflow Conda handling
	gatk_build = 3 // Major version number of GATK. Currently supported values are 3 and 4.
	gatk = "$launchDir/GenomeAnalysisTK.jar" // Path for GATK jar file. Ignore if using Conda-installed GATK.
	gatk_java = "" // Java options for GATK
	region_filter = true // Remove low-mappability/low-quality regions
	gm_tmpdir = '/tmp' // Scratch directory for GenMap indexing
	gm_opts = '-K 30 -E 2' // Options for GenMap mapping (except threading)
	rm_species = "Felidae" // Species name for RepeatMasker
	rm_mask_opts = '-gccalc -nolow -xsmall' // Options for RepeatMasker (except threading)
	rm_model_opts = '' // Options for RepeatModeler (except threading and -lib)
	indelpad = 5 // Number of bases to remove on each side of an indel
	prefix = "test" // Prefix for final datasets
	outdir = "test_results" // Directory for final results
	dam = "SRR" // Sample name for dam
	sire = "SRR2" // Sample name for sire
	vcftools_site_filters = "--minDP 30 --minGQ 65 --maxDP 250 --max-missing 1 --min-alleles 1 --max-alleles 2" // Site filters to pass to VCFtools. Set to "NULL" to ignore this filter.
	gatk_site_filters = '--filterName "filter" --filterExpression "QUAL < 30.0 || QD < 2.0 || FS > 60.0 || MQ < 40.0 || SOR > 3.0 || ReadPosRankSum < 15 || MQRankSum < -12.5"' // Site filters to pass to GATK. Set to 'NULL' to ignore this filter.
	chr_file = "$launchDir/chr.txt" // File listing chromosomes to keep in analysis. Set to "NULL" to ignore this filter. 
	min_contig_length = 1 // Minimum length of contig (before filtering) to retain in analysis
	min_filt_contig_length = 1 // Minimum length of contig (after filtering) to retain in analysis
	dnm_opts = "-b 100 -M 10 -w 100000 -l 100000 -S 50000 --parhom" // options for calc_denovo_mutation_rate
	email = "NULL" // Email to send completion status to. Set to "NULL" for no email.
	
}

modules {
	// List of Modules required for each executable. Set to "" for null value
	samtools = ""
	bcftools = ""
	bwa = ""
	java = ""
	sambamba = ""
	gzip = ""
	genmap = ""
	ruby = ""
	RepeatMasker = ""
	RepeatModeler = ""
	vcftools = ""
	bedtools = ""
	bgzip = ""
	tabix = ""
	awk = ""
	R = ""
	
}

conda.enabled = true

profiles {
	
	standard {
		process {
			executor = 'local'
			maxRetries 3
			errorStrategy = { task.attempt < 4 ? 'retry' : 'finish' }
			// Setting modules for each process separately to minimize dependency incompatibilities
			withName: 'prepareRef|alignSeqs' {
				module = [modules.samtools, modules.bwa].minus("")
			}
			withName: markDuplicates {
				if ( params.picard_conda ) {
					conda = 'bioconda::picard=3.1.0'
					module = [modules.sambamba, modules.samtools].minus("")
				} else {
					module = [modules.java, modules.sambamba, modules.samtools].minus("")
				}
			}
			withName: mergeLibraries {
				module = [modules.samtools].minus("")
			}
			withName: fixMate {
				if ( params.picard_conda ) {
					conda = 'bioconda::picard=3.1.0'
				} else {
					module = [modules.java].minus("")
				}
			}
			withName: 'realignIndels|callVariants' {
				if ( params.gatk_conda && params.picard_conda ) {
					if ( params.gatk_build == 3 ) {
						conda = 'bioconda::gatk=3.8 bioconda::picard=3.1.0'
					} else if ( params.gatk_build == 4 ) {
						conda = 'bioconda::gatk4=4.4.0.0 bioconda::picard=3.1.0'
					}
				} else if ( params.picard_conda ) {
					conda = 'bioconda::picard=3.1.0'
				} else if ( params.gatk_conda ) {
					if ( params.gatk_build == 3 ) {
						conda = 'bioconda::gatk=3.8'
					} else if ( params.gatk_build == 4 ) {
						conda = 'bioconda::gatk4=4.4.0.0'
					}
				} else {
					module = [modules.java].minus("")
				}
			}
			withName: filterBAMs  {
				if ( params.gatk_conda ) {
					if ( params.gatk_build == 3 ) {
						conda = 'bioconda::gatk=3.8'
					} else if ( params.gatk_build == 4 ) {
						conda = 'bioconda::gatk4=4.4.0.0'
					}
				} else {
					module = [modules.java].minus("")
				}
			}
			withName: genotypegVCFs {
				if ( params.gatk_conda ) {
					if ( params.gatk_build == 3 ) {
						conda = 'bioconda::gatk=3.8'
						module = [modules.gzip].minus("")
					} else if ( params.gatk_build == 4 ) {
						conda = 'bioconda::gatk4=4.4.0.0'
						module = [modules.gzip].minus("")
					}
				} else {
					module = [modules.java,modules.gzip].minus("")
				}
			}
			withName: genMapIndex {
				module = [modules.genmap].minus("")
			}
			withName: genMapMap {
				module = [modules.genmap,modules.ruby].minus("")
			}
			withName: repeatMask {
				module = [modules.RepeatMasker].minus("")
			}
			withName: repeatModeler {
				module = [modules.RepeatModeler].minus("")
				cpus = 2
			}
			withName: repeatMaskRM {
				module = [modules.RepeatMasker,modules.ruby].minus("")
			}
			withName: 'maskIndels|calcDNMRate|generateSummaryStats' {
				module = [modules.ruby].minus("")
			}
			withName: simplifyBed {
				module = [modules.bedtools].minus("")
			}
			withName: filterChr {
				module = [modules.vcftools,modules.gzip,modules.awk,modules.bcftools].minus("")
			}
			withName: splitTrios {
				module = [modules.vcftools,modules.gzip,modules.bcftools].minus("")
			}
			withName: pullDPGQ {
				module = [modules.bcftools].minus("")
			}
			withName: plotDPGQ {
				module = [modules.R].minus("")
			}
			withName: splitVCFs {
				module = [modules.ruby,modules.bgzip].minus("")			
			}
			withName: vcftoolsFilterSites {
				module = [modules.vcftools,modules.bgzip,modules.bcftools].minus("")
			}
			withName: gatkFilterSites {
				if ( params.gatk_conda ) {
					if ( params.gatk_build == 3 ) {
						conda = 'bioconda::gatk=3.8'
						module = [modules.tabix,modules.vcftools,modules.bcftools].minus("")
					} else if ( params.gatk_build == 4 ) {
						conda = 'bioconda::gatk4=4.4.0.0'
						module = [modules.tabix,modules.vcftools,modules.bcftools].minus("")
					}
				} else {
					module = [modules.java,modules.tabix,modules.vcftools,modules.bcftools].minus("")
				}
			}
			withName: filterRegions {
				module = [modules.bedtools,modules.vcftools,modules.gzip,modules.bcftools].minus("")
			}
			withName: summarizeDNM {
				module = [modules.ruby,modules.gzip,modules.bcftools].minus("")
			}
			withName: 'sanityCheckLogsVcftools|sanityCheckLogsGatk|sanityCheckLogsRegions|sanityCheckLogs' {
				module = [modules.gzip].minus("")
			}
		}
	}
	conda {
		params {
			picard_conda = true
			gatk_conda = true
		}
		process {
			executor = 'local'
			maxRetries 3
			errorStrategy = { task.attempt < 4 ? 'retry' : 'finish' }
			// Setting modules for each process separately to minimize dependency incompatibilities
			withName: 'prepareRef|alignSeqs' {
				conda = 'bioconda::bwa=0.7.17 bioconda::samtools=1.18 conda-forge::libzlib=1.2.13'
			}
			withName: markDuplicates {
				if ( params.markDuplicates == "picard" ) {
					conda = 'bioconda::picard=3.1.0'
				} else if (params.markDuplicates == 'samtools') {
					conda = 'bioconda::samtools=1.18 conda-forge::libzlib=1.2.13'
				} else {
					conda = 'bioconda::sambamba=0.8.2 conda-forge::libzlib=1.2.13'
				}
			}
			withName: mergeLibraries {
				conda = 'bioconda::samtools=1.18 conda-forge::libzlib=1.2.13'
			}
			withName: fixMate {
				conda = 'bioconda::picard=3.1.0'
			}
			withName: 'realignIndels|callVariants' {
				if ( params.gatk_build == 3 ) {
					conda = 'bioconda::picard=3.1.0 bioconda::gatk=3.8'
				} else if ( params.gatk_build == 4 ) {
					conda = 'bioconda::picard=3.1.0 bioconda::gatk4=4.4.0.0'
				}
			}
			withName: 'filterBAMs|genotypegVCFs'  {
				if ( params.gatk_build == 3 ) {
					conda = 'bioconda::gatk=3.8 conda-forge::gzip'
				} else if ( params.gatk_build == 4 ) {
					conda = 'bioconda::gatk4=4.4.0.0 conda-forge::gzip'
				}
			}
			withName: 'genMapIndex|genMapMap' {
				conda = 'bioconda::genmap=1.2.0 conda-forge::ruby=3.2.2'
			}
			withName: 'repeatMask|repeatMaskRM' {
				conda = 'bioconda::repeatmasker=4.1.5 conda-forge::ruby=3.2.2'
			}
			withName: repeatModeler {
				conda = 'bioconda::repeatmodeler=2.0.5 conda-forge::perl-text-soundex bioconda::repeatmasker=4.1.5'
				cpus = 2
			}
			withName: 'maskIndels|calcDNMRate|generateSummaryStats' {
				conda = 'conda-forge::ruby=3.2.2'
			}
			withName: simplifyBed {
				conda = 'bioconda::bedtools=2.31.0 conda-forge::libzlib=1.2.13'
			}
			withName: 'filterChr|splitTrios' {
				conda = 'bioconda::vcftools=0.1.16 conda-forge::gzip conda-forge::gawk bioconda::bcftools=1.18 conda-forge::libzlib=1.2.13'
			}
			withName: pullDPGQ {
				conda = 'bioconda::bcftools=1.18 conda-forge::libzlib=1.2.13'
			}
			withName: plotDPGQ {
				conda = 'r::r-tidyverse=1.3.1 r::r-data.table=1.14.2'
			}
			withName: splitVCFs {
				conda = 'conda-forge::ruby=3.2.2 bioconda::htslib=1.18 conda-forge::libzlib=1.2.13'	
			}
			withName: vcftoolsFilterSites {
				conda = 'bioconda::vcftools=0.1.16 bioconda::htslib=1.18 bioconda::bcftools=1.18 conda-forge::libzlib=1.2.13'
			}
			withName: gatkFilterSites {
				if ( params.gatk_build == 3 ) {
					conda = 'bioconda::gatk=3.8 bioconda::htslib=1.18 bioconda::vcftools=0.1.16 bioconda::bcftools=1.18 conda-forge::libzlib=1.2.13'
				} else if ( params.gatk_build == 4 ) {
					conda = 'bioconda::gatk4=4.4.0.0 bioconda::htslib=1.18 bioconda::vcftools=0.1.16 bioconda::bcftools=1.18 conda-forge::libzlib=1.2.13'
				}
			}
			withName: filterRegions {
				conda = 'bioconda::bedtools=2.31.0 bioconda::vcftools=0.1.16 conda-forge::gzip bioconda::bcftools=1.18 conda-forge::libzlib=1.2.13'
			}
			withName: summarizeDNM {
				conda = 'conda-forge::ruby=3.2.2 conda-forge::gzip bioconda::bcftools=1.18 conda-forge::libzlib=1.2.13'
			}
			withName: sanityCheckLogs {
				conda = 'conda-forge::gzip'
			}
		}
	}
}
