manifest {

	name = 'RatesTools'
	author = 'Michael G. Campana, Ellie E. Armstrong'
	homePage = 'https://github.com/campanam/RatesTools'
	description = 'Pipeline to calculate de novo mutation rates'
	mainScript = 'ratestools.nf'
	version = '0.1.0'
	nextflowVersion = '>=20.10.0'

}

params {

	refseq = "$baseDir/ref.fa" // Reference sequence
	reads = "$baseDir/*_{R1,R2}_001.fastq*" // Read pairs
	sample_count = 4 // Number of samples in dataset
	bwa_alg = "" // algorithm for BWA index. Value "" permits BWA to infer algorithm
	bwa_threads = 20 // Number of threads for BWA-MEM
	markDuplicates = "picard" // Choice of 'picard' or 'sambamba' for markDuplicates
	picard = "$baseDir/picard.jar" // Path for Picard jar file
	picard_java = "" // Java options for Picard
	gatk = "$baseDir/GenomeAnalysisTK.jar" // Path for GATK 3.8-1 jar file
	gatk_java = "" // Java options for GATK
	gatk_nct = 16 // Parallelization for GATK (when available)
	rm_species = "mouse" // Species name for RepeatMasker
	rm_pa = 24 // Number of parallel jobs for RepeatMasker/RepeatModeler
	prefix = "out" // Prefix for final datasets
	outdir = "results" // Directory for final results
	dam = "SRR" // Sample name for dam
	sire = "SRR2" // Sample name for sire
	site_filters = "--minDP 30 --minGQ 65 --maxDP 250 --max-missing 1 --min-alleles 1 --max-alleles 2" // Site filters to pass to VCFtools
	chr_file = "$baseDir/chr.txt" // File listing chromosomes to keep in analysis. Set to "NULL" to ignore this filter. 
	dnm_opts = "-b 100 -M 10 -w 100000 -l 100000 -S 50000" // options for calc_denovo_mutation_rate
	
}

modules {
	// List of Modules required for each executable. Set to "" for null value
	samtools = "bioinformatics/samtools/1.9"
	bwa = "bioinformatics/bwa/0.7.17"
	java = "java/1.8"
	sambamba = ""
	repeatmasker = "bioinformatics/repeatmasker/4.0.9"
	repeatmodeler = "bioinformatics/repeatmodeler/1.74"
}

profiles {
	
	standard {
		process.executor = 'local'	
	}
	
	hydra {
	 	// Parameters for the SI/HPC Hydra-5 UGE cluster. Does not permit use of the process.cpus variable
	 	
	 	// Default clusterOptions for picard and java commands
	 	params.picard_java = '-d64 -server -XX:MaxHeapSize=4G'
	 	params.gatk_java = '-d64 -server -XX:MaxHeapSize=4G'
	 	default_picard_options = "-l mres=5G,h_data=5G,h_vmem=5G -pe mthread ${params.sample_count} -S /bin/bash"
	 	gatk_nct_threads = params.gatk_nct * params.sample_count
	 	default_gatk_options = "-l mres=5G,h_data=5G,h_vmem=5G -pe mthread ${gatk_nct_threads} -S /bin/bash"
	 	
		process.executor = 'sge'

		process {
			withName: prepareRef {
				queue = 'sThC.q'
				clusterOptions = '-l mres=2G,h_data=2G,h_vmem=2G -S /bin/bash'
				module = [modules.samtools, modules.bwa].minus("")
			}
			withName: alignSeqs {
				queue = 'mThC.q'
				clusterOptions = "-l mres=2G,h_data=2G,h_vmem=2G -pe mthread ${params.bwa_threads} -S /bin/bash"
				module = [modules.bwa].minus("")
			}
			withName: markDuplicates {
				queue = 'mThC.q'
				clusterOptions = default_picard_options
				module = [modules.java, modules.sambamba].minus("")
			}
			withName: fixReadGroups {
				queue = 'mThC.q'
				clusterOptions = default_picard_options
				module = [modules.java].minus("")
			}
			withName: realignIndels {
				queue = 'mThC.q'
				clusterOptions = default_picard_options // Using picard options since not using gatk_nct
				module = [modules.java].minus("")
			}
			withName: filterBAMs  {
				queue = 'mThM.q'
				clusterOptions = default_gatk_options
				module = [modules.java].minus("")
			}
			withName: fixMate {
				queue = 'mThC.q'
				clusterOptions = default_picard_options
				module = [modules.java].minus("")
			}
			withName: callVariants {
				queue = 'lThM.q'
				clusterOptions = default_gatk_options
				module = [modules.java].minus("")
			}
			withName: genotypegVCFs {
				queue = 'lThC.q'
				clusterOptions = "-l mres=5G,h_data=5G,h_vmem=5G -S /bin/bash"
				module = [modules.java].minus("")
			}
			/* withName: genMap {
			}
			withName: repeatMask {
			}
			withName: maskIndels {
			}
			withName: simplifyBed {
			}
			withName: filterSites {
			}
			withName: filterRegions {
			}
			withName: filterChr {
			}
			withName: splitVCFs {
			}
			withName: calcDNMRate {
			}
			withName: summarizeDNM {
			} */
		}
	}

}
